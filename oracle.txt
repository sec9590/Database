** oracle 조작법 ** 

- 접근 및 계정 설정(권한 부여)
> sqlplus / as sysdba

> create user seun identified by 1234; (계정과 비밀번호 설정)

> grant connect, resource, dba to seun; (권한부여)

​- 패스워드 변경시 
> sqlplus / as sysdba
> alter user seun identified by 4444;

- DB 연결
con hr/1234;
연결 안될시
-- >sqlplus / as sysdba
      >alter user hr identified by 1234 account unlock;

-----------------------------------------------------------------------------------
* Char vs VarChar *
char : 고정형 문자열 (정해져있기에 검색속도 빠름)
varchar : 가변형 문자열 (정해놔도 입력된 문자만큼의 공간 잡힘)


* http://www.booksholic.co.kr/view.asp?pcode=pds&cur_num=31&cur_step=0&cur_level=0 (북스홀릭)

>@ 파일명 : 외부 SQL문 실행

- 테이블 전체 목록 보기
> select * from tab;

- 테이블 구조확인
> desc 테이블명;

- 라인의 길이 조절
> set linesize 10;

- 칼럼 조절
column dname format a40;
An : 문자형식 칼럼의 출력크기를 설정
9 : 숫자 형식 칼럼의 출력길이를 조정
0 : 지정된 길이 만큼 숫자 앞에 0을 추가
ex) column salary format 0,000; (형식지정)

- 행의 줄 조절
set pagesize 10;

- as 칼럼명 조회 처리(alias)
select ename 이름, salary 월급, salary*12 연봉 from employee;
select ename "이   름", salary "월   급", salary*12 "연   봉" from employee;

- null 값이 있을 경우 0으로 대체
※ 이처리를 안할경우 null값을 더했을 땐 나타나지 않음 ex)  salary*12+commission(commission이 null일경우)
nvl(칼럼명, 0)
> select ename, salary, job, dno, nvl(commission, 0), salary+12, salary*12+nvl(commission,0) from employee;

- 중복 배제 : distinct
> select distinct dno from employee;

- 오늘의 날짜보기
> select sysdate from employee;
(날짜가 테이블 행수만큼 출력)

- 하나만 출력하기 위해서
오라클에서는 dual이라는 dummy 테이블 제공
dummy 테이블에는 x라는 데이터만 저장
> select sysdate from dual;

Q) employee 테이블에서 급여가 1500이상인 사원을 출력하시오.
> select * from employee where salarly >= 1500;

Q) employee 테이블에서 10번부서인 사원을 출력
> select * from employee where dno=10;

Q)입사일이 '1981/01/01'이전인 사원만 출력 (문자열은 '')
> select * from employee where hiredate <='81/01/01';

Q)employee 테이블에서 10번부서가 아닌 사원을 출력
> select * from employee where not dno=10;
> select * from employee where dno != 10;
> select * from employee where dno <> 10;

Q)employee 테이블에서 급여가 1000~1500사이 사원을 출력 (and = between)
>select * from employee where salary between 1000 and 1500;
>select * from employee where salary>=1000 and salary<=1500;

Q)employee 테이블에서 커미션이 300이거나 500이거나 1400인 사원을 출력 (or = in)
>select * from employee where commission=300 or commission=500 or commission=1400;
>select * from employee where commission in(300, 500, 1400);

- Like 연산자
%: 하나 이상의 문자와 일치 하는 것
> select * from employee where ename like 'M%'; //M으로 시작하는
> select * from employee where ename like '%M'; //M으로 끝나는
>select * from employee where ename like %M%'; //M이 포함되는

Q)employee 테이블에서 1981년도에 입사한 사원 출력
> select * from employee where hiredate like '81%';
Q)employee 테이블에서 이름에 A와 E를 모두 포함하고 있는 사원
> select * from employee where e_name like '%A%' and e_name like '%E';

_ : 하나의 문자만 일치

Q)employee 테이블에서 사원 이름의 두번째 글자가 "A"인 사원 출력
>select * from employee where ename like '_A%'; // _ 문자 한개

- NULL인것 찾기 : is null
> select * from employee where commission is null;

- 정렬명령
order by asc : 오름차순
order by desc : 내림차순

Q)employee 테이블에서 가장 최근에 입사한 사원 정렬
> select * from employee order by hiredate desc;
Q)employee 테이블에서 급여가 2000을 넘는 사원 중 급여가 많은 순으로 출력
> select ename, salary from employee where salary > 2000 order by salary desc; 

- sql*Plus 명령어
L(IST) : 최근에 사용한 쿼리문 다시한번 나타내기
/ : 방금전에 했던 명령어 실행
R(UN) : 최근에 실행했던 명령어와 실행을 함께 수행
ED(IT) : 최근에 실행했던 명령어 편집 -> 고치고 창 닫기
SAV(E) : 쿼리문을 파일에 저장할 때 사용, 기본적인 확장자는 .sql 
ex) > select * from employee; 
        > save sample
        > exit(sql문 종료)
        dir -> sample. sql 저장완료
       - 수정하고 싶을 때 : ed sample.sql 
       - 전에 것을 버리고   save sample REPLACE (이전의 내용을 새로운 내용으로 대체)
       - 전에 것에 새로운 내용 추가 save sample APPEND
* host : 잠시 sql문 빠져나감 -> exit 하면 sql로 복귀
@ 파일명 : 외부 파일 실행

- 화면 캡쳐 
spool 갈무리 시작
spool off 갈무리 종료
ex) 
> spool test;
> select * from employee;
> select * from department;
> spool off;
> host 
> dir (확인)
> ed test.LST (캡쳐 확인)

------------------------------------------------------------------------------

-  문자함수
upper : 대문자로 변경
lower : 소문자로 변경
initcap : 첫글자만 대문자
ex) 
> select 'oracle like', upper('oracle like'), lower('oracle like'), initcap('oracle like') from dual;
 
- 문자조작함수
concat : 문자열 결합(연결) = concat(문자열1, 문자열2)
substr : 문자열 추출  = substr(대상, 시작위치, 추출할 개수)
instr : 특정 문자의 위치값을 반환 = instr(대상, 찾을글자, 시작위치, 몇번째 발견)
ex)
> select 'i', 'like',  concat('I', 'like') from dual;
> select substr('i like you' , 3,4) from dual;
> select substr('i like you' , -4,3) from dual; // 뒤에서부터 4번째
> select instr('Oracle mania', 'a') from dual; //처음 발견되는 a인젝스 반환 = > 3
> select instr('Oracle mania', 'a', 4, 2) from dual; // 4부터 시작하여 2번째의 a => 12

Q)employee 테이블에서 이름에 M으로 끝나는 사원 출력
> select * from employee where ename like '%M'; //M으로 끝나는
> select * from employee where substr(ename, -1, 1) = 'M';

Q)employee 테이블에서 1981년도에 입사한 사원 출력
> select * from employee where hiredate like '81%';
> select * from employee where substr(hiredate, 1, 2) = '81';

Q)employee 테이블에서 이름의 세번째 자리가 'R'인 사원을 출력
> select * from employee where instr(ename, 'R', 3, 1) = 3; 
> select * from employee where ename like ='__R%';

- 자릿수 채우기
LPAD(Left Padding) : 컬럼이나 문자열을 명시된 자릿수에서 오른쪽에 나타내고, 남은 왼쪽 자리를 특정기호로 채움
RPAD(Left Padding) : 컬럼이나 문자열을 명시된 자릿수에서 왼쪽에 나타내고, 남은 오른쪽 자리를 특정기호로 채움
> select LPAD(salary, 10, '*') from employee; // 자릿수 10개에서 공백은 *로 채움(데이터는 왼쪽으로 나타냄)

- 공백 제거
LTRIM : 왼쪽으로 공백 제거
RTRIM : 오른쪽으로 공백 제거
TRIM : 양쪽으로 공백제거
> select '  Oracle Like ', LTRIM('  Oracle Like '), RTRIM('  Oracle Like '), TRIM('  Oracle Like ') from dual;

: TRIM 함수는 칼럼이나 대상 문자열에서 특정 문자가 첫번째 글자이거나 마지막 글자이면 잘라내고 남은 문자열만 반환
> select 'Oracle mania', trim('O' from 'Oracle mania') from dual; //o를 제거

- 숫자함수
ROUND : 특정 자릿수에서 반올림
TRUNC : 특정 자릿수에서 잘라냄(버림)
MOD : 입력 받은 수를 나눈 나머지값 반환
> select 98.7654, round(98.7652), round(98.7654, 2), round(98.7654, -1)  from dual;  // -1 은정수, (숫자,2) 소수 2째자리 반올림
> select 98.7654, trunc(98.7652), truc(98.7654, 2), trunc(98.7654, -1)  from dual;  
> select mod(31,2) from dual; // 31/2 나머지 = 1

- 날짜함수
sysdate : 시스템에 저장된 현재 날짜 반환
ex) select sysdate-1 어제, sysdate+1 내일 from dual;
months_between : 두 날짜 사이가 몇개월인지 반환
NEXT_DAY : 특정날짜에서 최초로 도래하는 인자로 받은 요일의 날짜를 반환
ex) select sysdate, next_day(sysdate, '토요일') from dual;
LAST_DAY : 해당달의 마지막 날짜를 반환
Q. 올해 며칠이 지났는지 출력하시오.
> select round(sysdate- to_date('2019/01/01', 'yyyy/mm/dd')) from dual;

Q. 사원들의 근무일수를 구하시오.
> select ename, round(sysdate-hiredate) from employee;
Q. 특정날짜에서 월을 기준으로 버림한 날짜 구하기
> select hiredate, trunc(hiredate, 'MONTH') from employee;
Q. 각 사원들이 근무한 개월 수 구하기
> select ename, sysdate, hiredate, trunc(MONTHS_BETWEEN(sysdate, hiredate)) from employee;
Q. 입사한 달의 마지막 날 구하기
> select ename, hiredate, last_day(hiredate) from employee;
Q. 사원번호가 짝수인 사원만 출력하시오.
> select * from employee where mod(eno,2) = 0;

- 형 변환 함수
TO_CHAR : 날짜 형 또는 숫자형을 문자형으로 변환
TO_CHAR(number|date, 'format') : format은 작음 따옴표로 묶어서 대소문자 구분해 사용
YYYY or YY: 연도 표현
MM : 월을 숫자로 표현
MON : 월을 알파벳으로 표현
DAY : 요일 표현
DY : 요일을 약어로 표현

ex) select ename, hiredate, to_char(hiredate, 'yyyy/mm'), to_char(hiredate, 'yyyy-mm-dd day') from employee;

- 시간과 관련된 함수
AM(A.M) or PM(P.M) : 오전/오후
HH24 or HH12 : 24시간/12시간
MI : 분표시
SS : 초표현
ex) select to_char(sysdate, 'yyyy/mm/dd, H24:MI:SS') from dual;

Q. 입사일을 연도 2자기(YY), 월은 숫자(MON)로 표시하고 요일은 약어(DY)로 지정하여 출력
> select ename, to_char(hiredate, 'yy MON DY') from employee; 

- 통화기호
L : 각 지역별 통화기호를 앞에 붙여줌
ex) select ename, to_char(salary, 'L999,999') from employee;

- to_date 함수 : 특정데이터를 날짜형으로 변환해주는 오라클 함수
ex) select ename from employee where hiredate=to_date(19810220, 'yyyymmdd');

- to_number 함수 : 특정데이터를 숫자로 변환해주는 함수
ex) select '100,000'-'50,000' from dual;
select to_number('100,000','999.999')-to_number('50,000','999.999') from dual;

- 일반함수
1) NVL 함수
nvl : null을 0또는 다름값으로 변환하기위한 함수 (ex: nvl(commission, 0))
nvl2(exp1, exp2, exp3) 
: exp1을 검사하여 그결과가 null이면 exp2값을 반환하고, 그렇지 않으면 exp3값 반환
ex) select ename,salary,commission, nvl2(commission, salary*12 + commission, salary*12) from employee;

2)NULLIF 함수 (NULLIF(exp1, exp2)
: 두 표현식을 비교하여 동일한 경우 null값을 반환하고 동일하지 않으면 exp1반환
ex) select nullif('a','a'), nullif('a','b') from dual; => null, a

3) DECODE 함수 : SELECT 문장 내에서 비교연산을 수행하는 함수

DECODE(컬럼명, '조건', true 결과, false 결과)
ex) DECODE(itemno, '001', '가공식품', '비가공식품')

DECODE(컬럼명, '조건1', '값1', '조건2', '값2', '조건3', '값3'...)
ex) DECODE(itemno, '001', '가공식품', '002', '비가공식품', '003', '냉동식품'...)

Q. DECODE함수로 직급에 따라 급여를 인상하도록 하시오. (직급이 'ANAIYST' 사원 ㅣ 200, 'SALESMAN' 사원 |180, 'MANAGER' 사원|150, 'CLERK' 사원|100 인상)
> select ename,  job, decode(job, 'ANAIYST', salary+200, 'SALESMAN', salary+180, 'MANAGER',  salary+150, 'CLERK', salary+100) as 인상급여 from employee ;

4) CASE함수 
CASE 대상값 WHEN 비교값1 THEN 결과1 WHEN 비교값2 THEN 결과2 ELSE 결과3 END;	
ex) select ename, dno, case when dno=10 then 'accounting' when dno=20 then 'research' else 'default' end as dname from employee

- 그룹함수
※ 그룹함수는 다른 연산자와 달리 해당 컬럼이 null인경우 자동제외하여 계산.
- sum : 누적합계
- avg : 평균
- count : 총 개수
- max : 최대값
- min : 최소값

ex) 
select sum(salary) 급여총액, avg(salary) 급여평균, max(salary) 최대급여, min(salary) 최소급여 from employee;
select count(*) as "사원수" from employee;


Q. 각업무별로 급여 최고액, 최저액, 총액, 평균을 출력
> select job 직업, max(salary) 최대값, min(salary) 최소값, sum(salary) 합계, round(avg(salary)) 평균 from employee group by job;

- group by : 특정 컬럼을 기준으로 그룹으로 나눌 때 사용
: 하나 이상의 열을 나열하여 그룹을 나누면 그룹 및 하위그룹으로 결과를 반환
ex) select dno 부서번호, job, count(*), sum(salary) from employee group by dno, job order by dno, job;

Q. 소속 부서별 평균급여를 부서번호와 함께 출력
> select dno 부서번호, avg(salary) as "평균급여" from employee group by dno;
Q. 각 부서에 대해 부서번호, 사원수, 부서 내의 모든 사원의 평균 급여를 출력하시오. 평균급여는 소수점 둘째자리에서 반올림하시오.
> select dno 부서번호, count(*) 사원수, round(avg(salary),2) 평균급여 from employee group by dno order by dno;

- having : 그룹결과 제한
Q. 부서별 급여 총액이 3000이상인 부서의 번호와 부서별 급여 총액을 구하시오.
> select dno, sum(salary) from employee group by dno having sum(salary) >=3000;
Q. MANAGER를 제외하고 급여 총액이 5000이상인 직급별 급여 총액 구하기
> select job , sum(salary) from employee where not job = 'MANAGER' group by job having sum(salary) >=5000;

